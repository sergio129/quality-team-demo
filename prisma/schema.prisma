generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model QAAnalyst {
  id              String            @id @default(uuid())
  name            String
  email           String            @unique
  role            String
  color           String?
  availability    Int?
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  cells           AnalystCell[]
  AnalystVacation AnalystVacation[]
  certifications  Certification[]
  assignedBugs    Incident[]        @relation("AssignedTo")
  incidents       Incident[]        @relation("InformedBy")
  projects        ProjectAnalyst[]
  skills          Skill[]
  specialties     Specialty[]
  teams           TeamAnalyst[]
  user            User?
}

model Skill {
  id        String    @id @default(uuid())
  name      String
  level     String
  analystId String
  analyst   QAAnalyst @relation(fields: [analystId], references: [id], onDelete: Cascade)
}

model Certification {
  id         String    @id @default(uuid())
  name       String
  issuer     String
  date       DateTime
  expiryDate DateTime?
  analystId  String
  analyst    QAAnalyst @relation(fields: [analystId], references: [id], onDelete: Cascade)
}

model Specialty {
  id        String    @id @default(uuid())
  name      String
  analystId String
  analysts  QAAnalyst @relation(fields: [analystId], references: [id], onDelete: Cascade)
}

model Team {
  id          String        @id @default(uuid())
  name        String
  description String?
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  cells       Cell[]
  projects    Project[]
  analysts    TeamAnalyst[]
}

model Cell {
  id          String        @id @default(uuid())
  name        String
  description String?
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  teamId      String
  analysts    AnalystCell[]
  team        Team          @relation(fields: [teamId], references: [id])
  incidents   Incident[]
  projects    Project[]
}

model AnalystCell {
  id        String    @id @default(uuid())
  analystId String
  cellId    String
  analyst   QAAnalyst @relation(fields: [analystId], references: [id], onDelete: Cascade)
  cell      Cell      @relation(fields: [cellId], references: [id], onDelete: Cascade)

  @@unique([analystId, cellId])
}

model TeamAnalyst {
  id        String    @id @default(uuid())
  teamId    String
  analystId String
  analyst   QAAnalyst @relation(fields: [analystId], references: [id], onDelete: Cascade)
  team      Team      @relation(fields: [teamId], references: [id], onDelete: Cascade)

  @@unique([teamId, analystId])
}

model TestPlan {
  id             String      @id @default(uuid())
  projectId      String
  projectName    String
  codeReference  String
  startDate      DateTime
  endDate        DateTime
  estimatedHours Int
  estimatedDays  Int
  totalCases     Int
  testQuality    Float?
  createdAt      DateTime    @default(now())
  updatedAt      DateTime    @updatedAt
  testCases      TestCase[]
  cycles         TestCycle[]
}

model TestCase {
  id                String           @id @default(uuid())
  userStoryId       String
  name              String
  projectId         String
  codeRef           String
  expectedResult    String
  testType          String?
  status            String?
  category          String?
  responsiblePerson String?
  priority          String?
  cycle             Int?
  createdAt         DateTime         @default(now())
  updatedAt         DateTime         @updatedAt
  testPlanId        String
  defects           DefectRelation[]
  testPlan          TestPlan         @relation(fields: [testPlanId], references: [id])
  evidences         TestEvidence[]
  steps             TestStep[]
}

model TestStep {
  id          String   @id @default(uuid())
  description String
  expected    String?
  testCaseId  String
  testCase    TestCase @relation(fields: [testCaseId], references: [id], onDelete: Cascade)
}

model TestEvidence {
  id           String   @id @default(uuid())
  date         DateTime
  tester       String
  precondition String?
  result       String
  comments     String?
  testCaseId   String
  steps        String[]
  screenshots  String[]
  testCase     TestCase @relation(fields: [testCaseId], references: [id], onDelete: Cascade)
}

model TestCycle {
  id          String    @id @default(uuid())
  number      Int
  designed    Int
  successful  Int
  notExecuted Int
  defects     Int
  startDate   DateTime?
  endDate     DateTime?
  testPlanId  String
  testPlan    TestPlan  @relation(fields: [testPlanId], references: [id], onDelete: Cascade)
}

model Incident {
  id               String           @id @default(uuid())
  estado           String
  prioridad        String
  descripcion      String
  fechaCreacion    DateTime         @default(now())
  fechaReporte     DateTime
  fechaSolucion    DateTime?
  diasAbierto      Int
  esErroneo        Boolean          @default(false)
  aplica           Boolean          @default(true)
  cliente          String
  idJira           String
  tipoBug          String?
  areaAfectada     String?
  celula           String
  informadoPorId   String
  asignadoAId      String?
  asignadoA_text   String?
  testCases        DefectRelation[]
  asignadoA        QAAnalyst?       @relation("AssignedTo", fields: [asignadoAId], references: [id])
  cell             Cell             @relation(fields: [celula], references: [id])
  informadoPor     QAAnalyst        @relation("InformedBy", fields: [informadoPorId], references: [id])
  imagenes         IncidentImage[]
  historialEstados StateChange[]
  etiquetas        Tag[]
}

model Tag {
  id         String   @id @default(uuid())
  name       String
  incidentId String
  incident   Incident @relation(fields: [incidentId], references: [id], onDelete: Cascade)
}

model IncidentImage {
  id         String   @id @default(uuid())
  fileName   String
  fileType   String
  fileSize   Int
  data       Bytes
  createdAt  DateTime @default(now())
  incidentId String
  incident   Incident @relation(fields: [incidentId], references: [id], onDelete: Cascade)
}

model StateChange {
  id         String   @id @default(uuid())
  estado     String
  fecha      DateTime
  comentario String?
  incidentId String
  incident   Incident @relation(fields: [incidentId], references: [id], onDelete: Cascade)
}

model DefectRelation {
  id         String   @id @default(uuid())
  testCaseId String
  incidentId String
  incident   Incident @relation(fields: [incidentId], references: [id], onDelete: Cascade)
  testCase   TestCase @relation(fields: [testCaseId], references: [id], onDelete: Cascade)

  @@unique([testCaseId, incidentId])
}

model Project {
  id                 String           @id @default(uuid())
  idJira             String
  nombre             String?
  proyecto           String
  horas              Int
  dias               Int
  horasEstimadas     Int?
  estado             String?
  estadoCalculado    String?
  descripcion        String?
  fechaInicio        DateTime?
  fechaFin           DateTime?
  fechaEntrega       DateTime
  fechaRealEntrega   DateTime?
  fechaCertificacion DateTime?
  diasRetraso        Int
  analistaProducto   String
  planTrabajo        String
  createdAt          DateTime         @default(now())
  updatedAt          DateTime         @updatedAt
  equipoId           String           @map("equipo")
  celulaId           String           @map("celula")
  cell               Cell             @relation(fields: [celulaId], references: [id])
  team               Team             @relation(fields: [equipoId], references: [id])
  analysts           ProjectAnalyst[]
}

model ProjectAnalyst {
  id        String    @id @default(uuid())
  projectId String
  analystId String
  analyst   QAAnalyst @relation(fields: [analystId], references: [id], onDelete: Cascade)
  project   Project   @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@unique([projectId, analystId])
}

model AnalystVacation {
  id          String    @id @default(uuid())
  startDate   DateTime
  endDate     DateTime
  description String?
  type        String
  analystId   String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  QAAnalyst   QAAnalyst @relation(fields: [analystId], references: [id], onDelete: Cascade)
}

model User {
  id               String     @id @default(uuid())
  email            String     @unique
  password         String
  name             String
  isActive         Boolean    @default(true)
  lastLogin        DateTime?
  createdAt        DateTime   @default(now())
  updatedAt        DateTime   @updatedAt
  analyst          QAAnalyst? @relation(fields: [analystId], references: [id])
  analystId        String?    @unique
}
