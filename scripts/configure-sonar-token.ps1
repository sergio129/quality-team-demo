# Script para ayudar a generar un token de SonarQube
Write-Host "üîë Asistente para configurar token de SonarQube" -ForegroundColor Cyan
Write-Host "=========================================" -ForegroundColor Cyan

# Verificar si SonarQube est√° en ejecuci√≥n
Write-Host "`nüëâ Verificando si SonarQube est√° en ejecuci√≥n..." -ForegroundColor Yellow
try {
    $response = Invoke-WebRequest -Uri "http://localhost:9000/api/system/status" -Method Get -ErrorAction SilentlyContinue
    if ($response.StatusCode -eq 200) {
        Write-Host "‚úÖ SonarQube est√° en ejecuci√≥n" -ForegroundColor Green
    }
} catch {
    Write-Host "‚ùå SonarQube no est√° disponible en http://localhost:9000" -ForegroundColor Red
    Write-Host "Por favor, ejecuta primero setup-sonarqube-complete.ps1 para iniciar SonarQube" -ForegroundColor Yellow
    exit 1
}

# Mostrar instrucciones para generar un token
Write-Host "`nüìù Sigue estos pasos para generar un token en SonarQube:" -ForegroundColor Cyan
Write-Host "1. Abre http://localhost:9000 en tu navegador" -ForegroundColor White
Write-Host "2. Inicia sesi√≥n con las credenciales (por defecto admin/admin)" -ForegroundColor White
Write-Host "3. Ve a tu perfil (icono de usuario en la esquina superior derecha)" -ForegroundColor White
Write-Host "4. Selecciona 'Mi Cuenta'" -ForegroundColor White
Write-Host "5. Ve a la pesta√±a 'Tokens de seguridad'" -ForegroundColor White
Write-Host "6. Dale un nombre al token (ej: 'quality-team-token')" -ForegroundColor White
Write-Host "7. Haz clic en 'Generar'" -ForegroundColor White
Write-Host "8. IMPORTANTE: Copia el token generado" -ForegroundColor Red

Write-Host "`nUna vez que tengas el token, puedes:" -ForegroundColor Yellow
Write-Host "A. Guardarlo como variable de entorno (recomendado):" -ForegroundColor White
Write-Host "   \$env:SONAR_TOKEN = \"tu-token-generado\"" -ForegroundColor White
Write-Host "   (Esta variable se perder√° cuando cierres PowerShell)" -ForegroundColor Gray
Write-Host "   Para hacerla permanente: [Environment]::SetEnvironmentVariable(\"SONAR_TOKEN\", \"tu-token\", \"User\")" -ForegroundColor Gray

Write-Host "`nB. Actualizarlo en el archivo sonar-project.properties:" -ForegroundColor White
Write-Host "   sonar.login=tu-token-generado" -ForegroundColor White

# Preguntar si quiere actualizar el token ahora
$updateFile = Read-Host "`n¬øQuieres actualizar el token en sonar-project.properties ahora? (s/n)"
if ($updateFile -eq "s" -or $updateFile -eq "S") {
    $tokenValue = Read-Host "Ingresa el token generado" -AsSecureString
    
    # Convertir SecureString a texto plano
    $BSTR = [System.Runtime.InteropServices.Marshal]::SecureStringToBSTR($tokenValue)
    $tokenPlainText = [System.Runtime.InteropServices.Marshal]::PtrToStringAuto($BSTR)
    
    # Leer el archivo original
    $filePath = "..\sonar-project.properties"
    $content = Get-Content -Path $filePath -Raw
    
    # Reemplazar la l√≠nea del token
    $newContent = $content -replace "sonar\.login=.*", "sonar.login=$tokenPlainText"
    
    # Guardar el archivo
    $newContent | Set-Content -Path $filePath
    
    Write-Host "`n‚úÖ Token actualizado en sonar-project.properties" -ForegroundColor Green
} else {
    Write-Host "`n‚ö†Ô∏è No se ha actualizado el token en sonar-project.properties" -ForegroundColor Yellow
    Write-Host "Recuerda actualizar el token antes de ejecutar el an√°lisis" -ForegroundColor Yellow
}

Write-Host "`nüöÄ Para ejecutar el an√°lisis, usa:" -ForegroundColor Cyan
Write-Host "npm run sonar:compose" -ForegroundColor White
