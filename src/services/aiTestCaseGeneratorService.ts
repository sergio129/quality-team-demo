import { TestCase, TestStep } from '@/models/TestCase';
import { Project } from '@/models/Project';
import { v4 as uuidv4 } from 'uuid';
import { AITestCaseGenerator, CoverageReport, GenerateOptions, SuggestOptions } from '@/types/aiTestCaseGenerator';

// Define una interfaz para los datos extra√≠dos del Excel
export interface ExcelRequirementData {
  userStoryId?: string;         // ID (ej. HU1, HU2, HU3)
  requirementName?: string;     // Descripci√≥n general de la historia
  description?: string;         // Descripci√≥n detallada
  acceptanceCriteria?: string[];// Criterios de aceptaci√≥n generales
  functionalDescription?: string;// Descripci√≥n funcional adicional
  priority?: string;            // Alta, Media, Baja
  complexity?: string;          // Alta, Media, Baja
  preconditions?: string;       // Precondiciones para los casos de prueba
  testData?: string;            // Datos de prueba sugeridos

  // Nuevos campos basados en el formato de tabla de HU
  userRole?: string;            // Como un [Rol] (ej. Admin, Sistema)
  functionality?: string;       // Necesito [Caracter√≠stica/Funcionalidad]
  purpose?: string;             // Con la finalidad de [Raz√≥n/Resultado]
  scenarios?: Array<{
    number?: string;            // N√∫mero (#) de Escenario
    title?: string;             // Nombre o t√≠tulo Criterio de Aceptaci√≥n
    context?: string;           // Contexto (condiciones previas)
    event?: string;             // Cuando [Evento] (acci√≥n desencadenante)
    expectedResult?: string;    // Espero que el sistema [Resultado/Comportamiento esperado]
    securityRelevant?: boolean; // ¬øAPI Aplica para la seguridad? (SI/NO)
  }>;
}

// Interfaces para la nueva funcionalidad

/**
 * Servicio para generar casos de prueba utilizando IA
 *
 * Mejoras implementadas:
 * 1. Soporte para planes de prueba: Asociaci√≥n directa de casos generados con planes de prueba espec√≠ficos
 * 2. Extracci√≥n mejorada de requisitos: Mayor flexibilidad en la detecci√≥n de formatos de Excel
 * 3. Parser de IA avanzado: Detecci√≥n de diferentes formatos de respuesta y extracci√≥n robusta
 * 4. Informaci√≥n contextual: Posibilidad de enviar informaci√≥n adicional para mejorar la generaci√≥n
 * 5. Extracci√≥n de precondiciones: Captura completa de informaci√≥n de casos, incluyendo precondiciones
 * 6. Nuevos m√©todos: generateFromUserStory, generateFromRequirements, suggestTestScenarios, analyzeTestCoverage
 */
export class AITestCaseGeneratorService implements AITestCaseGenerator {
  private apiKey: string;
  private apiEndpoint: string;
  private apiModel: string;
  private maxTokens: number;
  constructor(
    options?: {
      apiKey?: string;
      apiModel?: string;
      maxTokens?: number;
      apiEndpoint?: string;
    }
  ) {    // Configurar API key desde m√∫ltiples fuentes posibles (para compatibilidad con Vercel)
    this.apiKey = options?.apiKey ||
                  process.env.NEXT_PUBLIC_GROQ_API_KEY ||
                  process.env.GROQ_API_KEY || // Variable sin NEXT_PUBLIC para Vercel
                  process.env.NEXT_PUBLIC_OPENAI_API_KEY || // Fallback por si acaso
                  '';

    // Verificaci√≥n cr√≠tica: Si no hay API key, mostrar error claro
    if (!this.apiKey || this.apiKey.trim() === '') {
      console.error('‚ùå ERROR CR√çTICO: No se ha configurado ninguna API key de Groq');
      console.error('‚ùå Variables de entorno verificadas:');
      console.error('   - NEXT_PUBLIC_GROQ_API_KEY:', process.env.NEXT_PUBLIC_GROQ_API_KEY ? 'Configurada' : 'NO CONFIGURADA');
      console.error('   - GROQ_API_KEY:', process.env.GROQ_API_KEY ? 'Configurada' : 'NO CONFIGURADA');
      console.error('   - NODE_ENV:', process.env.NODE_ENV);
      console.error('‚ùå INSTRUCCIONES: Configura NEXT_PUBLIC_GROQ_API_KEY en Vercel con tu API key de Groq');
      throw new Error('API key de Groq no configurada. Ve las instrucciones en los logs de error.');
    }

    // Detectar el tipo de API key para configurar el proveedor
    const isGroqKey = this.apiKey.startsWith('gsk_');

    // Configurar el modelo y endpoint para Groq
    if (isGroqKey) {
      this.apiModel = options?.apiModel || "gemma2-9b-it";
      this.apiEndpoint = options?.apiEndpoint || 'https://api.groq.com/openai/v1/chat/completions';
      console.log('‚úÖ Utilizando API de Groq con modelo gemma2-9b-it');
    } else {
      // Fallback: intentar usar Groq si no hay API key configurada
      console.warn('‚ùå No se detect√≥ API key de Groq v√°lida. Configurando para usar Groq por defecto.');
      this.apiModel = "llama3-70b-8192";
      this.apiEndpoint = 'https://api.groq.com/openai/v1/chat/completions';
      this.apiKey = ''; // Esto deber√≠a fallar y mostrar error claro
    }
    
    this.maxTokens = options?.maxTokens || 3000;
    console.log('API Key configurada correctamente'); // Log para confirmar que se configur√≥ (solo primera parte para seguridad)
  }
  
  /**
   * M√©todo est√°tico para usar desde componentes
   */  
  static async generateTestCasesWithAI(
    requirements: ExcelRequirementData[], 
    options?: { 
      projectId?: string; 
      testPlanId?: string;
      cycleNumber?: number;
      contextualInfo?: string;
    }
  ): Promise<{ 
    success: boolean; 
    data: Partial<TestCase>[]; 
    error?: string;
    status?: {
      totalRequirements: number;
      processedRequirements: number;
      generatedCases: number;
    }
  }> {
    try {
      const service = new AITestCaseGeneratorService();
      
      // Verificaci√≥n cr√≠tica: Validar que la API key est√© configurada antes de procesar
      if (!service.apiKey || service.apiKey.trim() === '') {
        return {
          success: false,
          data: [],
          error: 'API key de Groq no configurada. Configura NEXT_PUBLIC_GROQ_API_KEY en Vercel.',
          status: {
            totalRequirements: requirements?.length || 0,
            processedRequirements: 0,
            generatedCases: 0
          }
        };
      }
      
      // Validar que hay requisitos para procesar
      if (!requirements || requirements.length === 0) {
        return {
          success: false,
          data: [],
          error: 'No se proporcionaron requisitos para generar casos de prueba',
          status: {
            totalRequirements: 0,
            processedRequirements: 0,
            generatedCases: 0
          }
        };
      }
      
      // Filtrar requisitos v√°lidos (con nombre o descripci√≥n)
      const validRequirements = requirements.filter(req => 
        (req.requirementName && req.requirementName.trim()) || 
        (req.description && req.description.trim())
      );
      
      if (validRequirements.length === 0) {
        return {
          success: false,
          data: [],
          error: 'No se encontraron requisitos v√°lidos para generar casos de prueba',
          status: {
            totalRequirements: requirements.length,
            processedRequirements: 0,
            generatedCases: 0
          }
        };
      }
      
      // Usar el ID proporcionado o extraerlo del primer requisito, o generar uno nuevo
      const projectId = options?.projectId || 
                        (validRequirements[0].userStoryId ? validRequirements[0].userStoryId.split('-')[0] : '') || 
                        uuidv4();
      
      // Ciclo por defecto es 1
      const cycleNumber = options?.cycleNumber || 1;
      
      // Generar los casos de prueba con informaci√≥n de contexto adicional
      const testCases = await service.generateTestCases(
        projectId, 
        validRequirements, 
        cycleNumber,
        options?.testPlanId,
        options?.contextualInfo
      );
      
      // Retornar con informaci√≥n de estado del proceso
      return {
        success: true,
        data: testCases,
        status: {
          totalRequirements: requirements.length,
          processedRequirements: validRequirements.length,
          generatedCases: testCases.length
        }
      };
    } catch (error) {
      console.error('Error in generateTestCasesWithAI:', error);
      return {
        success: false,
        data: [],
        error: error instanceof Error ? error.message : 'Error desconocido',
        status: {
          totalRequirements: requirements?.length || 0,
          processedRequirements: 0,
          generatedCases: 0
        }
      };
    }
  }
  /**
   * Genera casos de prueba basados en los datos extra√≠dos del Excel
   */
  public async generateTestCases(
    projectId: string,
    requirements: ExcelRequirementData[],
    cycleNumber: number = 1,
    testPlanId?: string,
    contextualInfo?: string
  ): Promise<Partial<TestCase>[]> {
    try {
      const generatedTestCases: Partial<TestCase>[] = [];

      // Validar cada requisito antes de procesarlo
      const validatedRequirements = requirements.filter(req => {
        // Validaci√≥n b√°sica: debe tener al menos un nombre o descripci√≥n
        const isValid = Boolean(
          (req.requirementName && req.requirementName.trim()) || 
          (req.description && req.description.trim())
        );
        
        if (!isValid) {
          console.warn('Skipping invalid requirement without name or description', req);
        }
        
        return isValid;
      });
      
      if (validatedRequirements.length === 0) {
        console.warn('No valid requirements found to process');
        return [];
      }

      // Procesar cada requisito o historia de usuario validado
      console.log(`üìä Procesando ${validatedRequirements.length} requisitos con IA...`);

      for (let i = 0; i < validatedRequirements.length; i++) {
        const req = validatedRequirements[i];

        try {
          console.log(`üîÑ Procesando requisito ${i + 1}/${validatedRequirements.length}: ${req.requirementName || req.userStoryId || 'Sin nombre'}`);

          // Enriquecemos el requisito si falta informaci√≥n
          this.enrichRequirement(req);

          // Creamos el prompt para la IA, incluyendo informaci√≥n contextual
          const prompt = this.createPrompt(req, contextualInfo);

          // Llamamos a la API de Groq
          const response = await this.callAIAPI(prompt);

          // Convertimos la respuesta de la IA en casos de prueba estructurados
          const testCases = this.parseAIResponse(response, projectId, req.userStoryId || '', cycleNumber);

          // Si hay un plan de pruebas, lo asociamos a cada caso
          if (testPlanId) {
            testCases.forEach(tc => {
              tc.testPlanId = testPlanId;
            });
          }

          generatedTestCases.push(...testCases);
          console.log(`‚úÖ Requisito ${i + 1} completado: ${testCases.length} casos generados`);

          // Agregar delay entre requisitos para evitar rate limiting
          // Solo agregar delay si no es el √∫ltimo requisito
          if (i < validatedRequirements.length - 1) {
            const delayMs = 5000; // 5 segundos entre requisitos
            console.log(`‚è≥ Esperando ${delayMs/1000} segundos antes del siguiente requisito... (${i + 1}/${validatedRequirements.length})`);
            await new Promise(resolve => setTimeout(resolve, delayMs));
          }
        } catch (reqError) {
          console.error(`‚ùå Error procesando requisito ${i + 1}: ${req.requirementName}`, reqError);
          // Continuamos con el siguiente requisito si hay error en el actual
          continue;
        }
      }

      console.log(`üéâ Procesamiento completado: ${generatedTestCases.length} casos de prueba generados de ${validatedRequirements.length} requisitos`);      return generatedTestCases;
    } catch (error) {
      console.error('Error generating test cases with AI:', error);
      throw new Error('No se pudieron generar los casos de prueba con IA');
    }
  }
    /**
   * Enriquece un requisito con informaci√≥n deducida si falta alg√∫n campo
   */  private enrichRequirement(requirement: ExcelRequirementData): void {
    // Si no hay ID de historia de usuario, intentar extraerlo del nombre o descripci√≥n
    if (!requirement.userStoryId || !requirement.userStoryId.trim()) {
      const nameDesc = `${requirement.requirementName || ''} ${requirement.description || ''}`;
      
      // Buscar diferentes patrones de IDs de historias de usuario
      const patterns = [
        { regex: /\b(?:US|HU|HU1|US1|HU\d+|US\d+)\b/i, type: 'standard' },  // HU1, US1, HU123, US123
        { regex: /\b[A-Z]{2,}-\d+\b/g, type: 'dashed' },  // AB-123, XY-456
        { regex: /\b[A-Z]{3,}\d+\b/g, type: 'alphanumeric' },   // ABC123, XYZ456
        { regex: /\b\d{1,3}\b/g, type: 'numbers' }         // Solo n√∫meros (como √∫ltimo recurso)
      ];
      
      let foundId = null;
      for (const pattern of patterns) {
        const match = nameDesc.match(pattern.regex);
        if (match) {
          // Para el √∫ltimo patr√≥n (solo n√∫meros), ser m√°s espec√≠fico
          if (pattern.type === 'numbers') {
            // Solo usar n√∫meros si est√°n precedidos por HU, US, o similar
            const contextMatch = nameDesc.match(/\b(?:HU|US|Historia|User Story)[\s:]*(\d{1,3})\b/i);
            if (contextMatch) {
              foundId = `HU${contextMatch[1]}`;
              break;
            }
          } else {
            foundId = match[0];
            break;
          }
        }
      }
      
      if (foundId) {
        requirement.userStoryId = foundId;
        console.log(`‚úÖ ID de historia de usuario extra√≠do: ${foundId}`);
      } else {
        // Generar un ID m√°s legible si no se encuentra ninguno
        const timestamp = Date.now();
        const shortId = timestamp.toString().slice(-4); // √öltimos 4 d√≠gitos
        requirement.userStoryId = `HU-${shortId}`;
        console.log(`üîÑ ID de historia de usuario generado: ${requirement.userStoryId}`);
      }
    }
    
    // Procesamiento para el formato de historias de usuario en forma de tabla
    // Si tenemos rol, funcionalidad y prop√≥sito pero no hay requirementName, construirlo en formato Gherkin
    if (requirement.userRole && requirement.functionality && requirement.purpose && !requirement.requirementName) {
      requirement.requirementName = `Como ${requirement.userRole} necesito ${requirement.functionality} con la finalidad de ${requirement.purpose}`;
    }    // Si el formato del requisito no tiene informaci√≥n desglosada pero tenemos una descripci√≥n,
    // intentar extraer el formato "Como... necesito... con la finalidad de..."
    if (!requirement.userRole && !requirement.functionality && !requirement.purpose && requirement.description) {
      const asAMatch = requirement.description.match(/(?:Como|En mi rol de)(.*?)(?:necesito|quiero|debo)(.*?)(?:con la finalidad de|para|con el fin de)(.*?)(?:$|\n)/i);
      if (asAMatch && asAMatch.length >= 4) {
        requirement.userRole = asAMatch[1].trim();
        requirement.functionality = asAMatch[2].trim();
        requirement.purpose = asAMatch[3].trim();
        
        // Si no hay nombre de requisito, crearlo
        if (!requirement.requirementName) {
          requirement.requirementName = `Como ${requirement.userRole} necesito ${requirement.functionality} con la finalidad de ${requirement.purpose}`;
        }
      }
    }
    
    // Procesamiento de escenarios estructurados seg√∫n el formato de tabla
    // Si no tenemos escenarios pero tenemos criterios de aceptaci√≥n, intentar extraer escenarios de ellos
    if ((!requirement.scenarios || requirement.scenarios.length === 0) && 
        requirement.acceptanceCriteria && requirement.acceptanceCriteria.length > 0) {
      
      requirement.scenarios = requirement.acceptanceCriteria.map((criterio, index) => {        // Intentar extraer partes del criterio de aceptaci√≥n en formato Gherkin
        const gherkinMatch = criterio.match(
          /(?:Dado que|Dado|Given)(.*?)(?:Cuando|Cuando se|When)(.*?)(?:Entonces|Espero que|Then)(.*?)$/i
        );
        
        if (gherkinMatch && gherkinMatch.length >= 4) {
          return {
            number: String(index + 1),
            title: `Escenario ${index + 1}`,
            context: gherkinMatch[1].trim(),
            event: gherkinMatch[2].trim(),
            expectedResult: gherkinMatch[3].trim(),
            securityRelevant: criterio.toLowerCase().includes('seguridad') || 
                              criterio.toLowerCase().includes('security')
          };
        }
        
        // Si no est√° en formato Gherkin, crear un escenario b√°sico
        return {
          number: String(index + 1),
          title: `Criterio de Aceptaci√≥n ${index + 1}`,
          context: '',
          event: '',
          expectedResult: criterio.trim(),
          securityRelevant: criterio.toLowerCase().includes('seguridad') || 
                            criterio.toLowerCase().includes('security')
        };
      });
    }
    
    // Si tenemos escenarios pero no est√°n bien estructurados, asegurarse de que tengan todos los campos
    if (requirement.scenarios && requirement.scenarios.length > 0) {
      requirement.scenarios = requirement.scenarios.map((scenario, index) => {
        // Garantizar que cada escenario tenga un n√∫mero
        if (!scenario.number) {
          scenario.number = String(index + 1);
        }
        
        // Garantizar que cada escenario tenga un t√≠tulo
        if (!scenario.title) {
          scenario.title = `Escenario ${scenario.number}`;
        }
        
        // Si hay un t√≠tulo pero no hay evento ni resultado esperado, intentar extraer el formato Gherkin
        if (scenario.title && (!scenario.event || !scenario.expectedResult)) {          const gherkinMatch = scenario.title.match(
            /(?:Dado que|Dado|Given)?(.*?)(?:Cuando|Cuando se|When)?(.*?)(?:Entonces|Espero que|Then)?(.*?)$/i
          );
          
          if (gherkinMatch) {
            // Solo usar estos valores si no hay valores existentes
            if (!scenario.context) scenario.context = (gherkinMatch[1] || '').trim();
            if (!scenario.event) scenario.event = (gherkinMatch[2] || '').trim();
            if (!scenario.expectedResult) scenario.expectedResult = (gherkinMatch[3] || '').trim();
          }
        }
        
        // Valor por defecto para securityRelevant si no est√° definido
        if (scenario.securityRelevant === undefined) {
          scenario.securityRelevant = 
            (scenario.title?.toLowerCase().includes('seguridad') || 
             scenario.expectedResult?.toLowerCase().includes('seguridad') ||
             scenario.title?.toLowerCase().includes('security') || 
             scenario.expectedResult?.toLowerCase().includes('security')) || false;
        }
        
        return scenario;
      });
    }
    
    // Si tenemos escenarios, convertirlos a criterios de aceptaci√≥n si no est√°n presentes
    if (requirement.scenarios && requirement.scenarios.length > 0 && 
        (!requirement.acceptanceCriteria || requirement.acceptanceCriteria.length === 0)) {
      
      requirement.acceptanceCriteria = requirement.scenarios.map(s => {
        let criterio = '';
        if (s.title && !s.title.includes('Escenario')) criterio += `${s.title}: `;
        if (s.context) criterio += `Dado que ${s.context} `;
        if (s.event) criterio += `Cuando ${s.event} `;
        if (s.expectedResult) criterio += `Entonces ${s.expectedResult}`;
        return criterio.trim() || `Escenario #${s.number || '?'}: ${s.title || 'No especificado'}`;
      });
    }
    
    // Si no hay criterios de aceptaci√≥n pero hay descripci√≥n, intentar extraerlos
    if ((!requirement.acceptanceCriteria || requirement.acceptanceCriteria.length === 0) && 
        !requirement.scenarios && requirement.description) {
      const desc = requirement.description;
      
      // Buscar secciones que podr√≠an ser criterios de aceptaci√≥n
      if (desc.includes('Criterios') || desc.includes('Cuando') || desc.includes('Dado que')) {
        const criteria = desc.split(/\n/).filter(line => 
          line.match(/^[-*‚Ä¢]|^\d+[\.\)]|^Cuando|^Dado|^Entonces|^Given|^When|^Then/i)
        );
        
        if (criteria.length > 0) {
          requirement.acceptanceCriteria = criteria.map(c => c.trim());
        }
      }
    }
    
    // Si el nombre es demasiado largo, acortarlo y mover el resto a la descripci√≥n
    if (requirement.requirementName && requirement.requirementName.length > 100) {
      const originalName = requirement.requirementName;
      requirement.requirementName = originalName.substring(0, 97) + '...';
      requirement.description = `${originalName}\n\n${requirement.description || ''}`;
    }

    // Si hay escenarios con contexto, extraer precondiciones
    if (requirement.scenarios && requirement.scenarios.length > 0 && !requirement.preconditions) {
      const contextDescriptions = requirement.scenarios
        .filter(s => s.context && s.context.trim())
        .map(s => s.context);
      
      if (contextDescriptions.length > 0) {
        requirement.preconditions = contextDescriptions.join('; ');
      }
    }

    // Extraer prioridad del texto si no est√° especificada
    if (!requirement.priority && requirement.description) {
      const priorityMatch = requirement.description.match(/\b(prioridad|priority|importancia):\s*(alta|media|baja|high|medium|low|cr√≠tica|critical)\b/i);
      if (priorityMatch) {
        const priority = priorityMatch[2].toLowerCase();
        if (priority.includes('alta') || priority.includes('high') || priority.includes('cr√≠tica')) {
          requirement.priority = 'Alta';
        } else if (priority.includes('media') || priority.includes('medium')) {
          requirement.priority = 'Media';
        } else if (priority.includes('baja') || priority.includes('low')) {
          requirement.priority = 'Baja';
        }
      }
    }

    // Extraer complejidad del texto si no est√° especificada
    if (!requirement.complexity && requirement.description) {
      const complexityMatch = requirement.description.match(/\b(complejidad|complexity|dificultad):\s*(alta|media|baja|high|medium|low|compleja|complex|simple)\b/i);
      if (complexityMatch) {
        const complexity = complexityMatch[2].toLowerCase();
        if (complexity.includes('alta') || complexity.includes('high') || complexity.includes('compleja')) {
          requirement.complexity = 'Alta';
        } else if (complexity.includes('media') || complexity.includes('medium')) {
          requirement.complexity = 'Media';
        } else if (complexity.includes('baja') || complexity.includes('low') || complexity.includes('simple')) {
          requirement.complexity = 'Baja';
        }
      }
    }
    
    // Extraer precondiciones de la descripci√≥n si a√∫n no est√°n especificadas
    if (!requirement.preconditions && requirement.description) {
      const preconditionsMatch = requirement.description.match(/\b(precondiciones|precondition|prerequisites|condiciones previas):\s*([^\n]+)/i);
      if (preconditionsMatch) {
        requirement.preconditions = preconditionsMatch[2].trim();
      }
    }
    
    // Extraer datos de prueba de la descripci√≥n si no est√°n especificados
    if (!requirement.testData && requirement.description) {
      const testDataMatch = requirement.description.match(/\b(datos de prueba|test data|data|ejemplos):\s*([^\n]+)/i);
      if (testDataMatch) {
        requirement.testData = testDataMatch[2].trim();
      }
    }
  }
  
  /**
   * Crea el prompt para la IA basado en los datos del requisito
   */  private createPrompt(requirement: ExcelRequirementData, contextualInfo?: string): string {
    // Construimos un prompt detallado para obtener mejores resultados
    let prompt = `Como experto en pruebas de software, genera entre 3 y 5 casos de prueba completos y detallados que cubran todos los aspectos del requisito.

CR√çTICO: Los nombres de los casos de prueba DEBEN ser espec√≠ficos y descriptivos. NO uses nombres gen√©ricos.

Para cada caso de prueba incluye:

1. ID del caso de prueba (formato: ${requirement.userStoryId || 'HU'}-TC-###, donde ### es un n√∫mero secuencial empezando en 01)
2. Nombre del caso de prueba (M√ÅXIMA PRIORIDAD: Debe ser espec√≠fico y descriptivo, m√°ximo 100 caracteres. OBLIGATORIO usar nombres como:
   - Para HU1 (campos en Jasper): "Validar creaci√≥n de campos Monto, Plazo y Producto en informe Jasper"
   - Para HU2 (ingresos mensuales): "Verificar validaci√≥n de formato num√©rico en campos de ingresos mensuales"
   - Para HU2 (ingresos anuales): "Comprobar formato de moneda en ingresos anuales con m√≠nimo 7 caracteres"
   - Para cualquier HU de informes: "Probar descarga de informe con filtros aplicados correctamente"
   - Para cualquier HU de CRM: "Validar configuraci√≥n de campos obligatorios en formulario del CRM"
   NUNCA uses: "Caso de prueba 1", "s y tipos de datos", "Verificar funcionalidad", etc.)
3. Tipo de prueba (Funcional, No Funcional, Regresi√≥n, Exploratoria, Integraci√≥n, Rendimiento, Seguridad)
4. Prioridad (Alta, Media, Baja)
5. Precondiciones necesarias (estado del sistema antes de iniciar la prueba)
6. Pasos detallados (numerados, claros y espec√≠ficos, con un m√°ximo de 10 pasos)
7. Resultado esperado para cada caso (detallado y verificable)

REGLAS ESTRICTAS PARA NOMBRES:
- ANALIZA la descripci√≥n de la HU y extrae las palabras clave m√°s importantes
- Usa verbos espec√≠ficos: "Validar", "Verificar", "Comprobar", "Probar", "Confirmar"
- Incluye los elementos espec√≠ficos mencionados en la HU (nombres de campos, informes, funcionalidades)
- Si es sobre campos: menciona cu√°les campos espec√≠ficos
- Si es sobre informes: menciona el tipo de informe (Jasper, etc.)
- Si es sobre CRM: menciona la funcionalidad espec√≠fica del CRM
- Si es sobre validaciones: menciona qu√© tipo de validaci√≥n
- Ejemplos PERFECTOS basados en HU reales:
  * HU1: "Validar visualizaci√≥n de campos Monto, Plazo y Producto en informe Jasper"
  * HU1: "Confirmar descarga de informe de entrevista con tres campos nuevos"
  * HU2: "Verificar validaci√≥n de m√≠nimo 7 caracteres en ingresos mensuales"
  * HU2: "Comprobar formato de moneda en campo ingresos anuales del CRM"
  * HU2: "Probar obligatoriedad de campos de ingresos en formulario de venta"

Aseg√∫rate de cubrir los siguientes tipos de pruebas:
- Happy path (flujo normal/exitoso)
- Casos negativos/alternativos (manejo de errores, entradas inv√°lidas)
- Casos l√≠mite (valores extremos o condiciones de borde)
- Validaciones de UI cuando corresponda

Los casos deben ser realistas, detallados y enfocados en verificar la funcionalidad descrita, no en aspectos t√©cnicos de implementaci√≥n. Los pasos deben ser claros para que cualquier tester pueda seguirlos sin conocimientos t√©cnicos adicionales.

Estructura cada caso de prueba claramente con encabezados para facilitar su lectura y procesamiento.

IMPORTANTE: El nombre del caso debe ser lo suficientemente espec√≠fico para que cualquier persona pueda entender exactamente qu√© funcionalidad se est√° probando sin leer la descripci√≥n completa.

DATOS DEL REQUISITO A PROBAR:

Historia/Requisito: ${requirement.requirementName || 'No especificado'}

ID de Historia de Usuario: ${requirement.userStoryId || 'No especificado'}

${requirement.userRole ? `Rol de Usuario: ${requirement.userRole}` : ''}
${requirement.functionality ? `Funcionalidad: ${requirement.functionality}` : ''}
${requirement.purpose ? `Prop√≥sito/Finalidad: ${requirement.purpose}` : ''}

Descripci√≥n: ${requirement.description || 'No hay descripci√≥n disponible'}

${requirement.functionalDescription ? `Descripci√≥n funcional: ${requirement.functionalDescription}` : ''}

${requirement.priority ? `Prioridad: ${requirement.priority}` : ''}

${requirement.complexity ? `Complejidad: ${requirement.complexity}` : ''}

${requirement.preconditions ? `Precondiciones: ${requirement.preconditions}` : ''}

${requirement.testData ? `Datos de prueba: ${requirement.testData}` : ''}

${requirement.acceptanceCriteria && requirement.acceptanceCriteria.length > 0 
  ? `Criterios de aceptaci√≥n:\n${requirement.acceptanceCriteria.map(c => `- ${c}`).join('\n')}` 
  : ''}

${requirement.scenarios && requirement.scenarios.length > 0 
  ? `\nEscenarios/Criterios de Aceptaci√≥n detallados:
${requirement.scenarios.map(s => `
#${s.number || ''}: ${s.title || ''}
- Contexto: ${s.context || 'No especificado'}
- Evento: ${s.event || 'No especificado'}
- Resultado Esperado: ${s.expectedResult || 'No especificado'}
${s.securityRelevant ? '- Relevante para seguridad: S√ç' : ''}
`).join('\n')}`
  : ''}

${contextualInfo ? `\nInformaci√≥n contextual adicional:\n${contextualInfo}\n` : ''}`;

    return prompt;
  }  /**
   * Llama a la API de Groq para generar los casos de prueba
   */
  private async callAIAPI(prompt: string, retryCount = 0): Promise<string> {
    try {
      // Verificar que la clave API est√© definida
      if (!this.apiKey || this.apiKey.trim() === '') {
        console.error('‚ùå ERROR: Intento de llamada a API sin API key configurada');
        console.error('‚ùå Aseg√∫rate de configurar NEXT_PUBLIC_GROQ_API_KEY en Vercel');
        throw new Error('API key de Groq no configurada. Configura NEXT_PUBLIC_GROQ_API_KEY en Vercel.');
      }

      // Identificar el tipo de proveedor seg√∫n el formato de la API key
      const isGroqKey = this.apiKey.startsWith('gsk_');
      
      let providerName = isGroqKey ? 'Groq' : 'Desconocido';
      console.log(`Preparando llamada a la API de ${providerName}...`);
      
      // Headers para Groq
      const headers: Record<string, string> = {
        'Content-Type': 'application/json',
        'Authorization': `Bearer ${this.apiKey.trim()}`
      };
      
      let requestBody;
      
      // Construir el cuerpo de la solicitud para Groq
      if (isGroqKey) {
        // Formato para Groq API
        requestBody = {
          model: this.apiModel,
          messages: [
            {
              role: "system",
              content: "Eres un experto en pruebas de software especializado en crear casos de prueba detallados y exhaustivos para aseguramiento de calidad. Tus casos deben ser claros, seguir un formato consistente y cubrir todas las funcionalidades y escenarios."
            },
            {
              role: "user",
              content: prompt
            }
          ],
          temperature: 0.5,  // Un poco m√°s determinista para casos de prueba
          max_tokens: this.maxTokens
        };
      } else {
        throw new Error('Solo se soporta API key de Groq (debe comenzar con "gsk_")');
      }
      
      const response = await fetch(this.apiEndpoint, {
        method: 'POST',
        headers: headers,
        body: JSON.stringify(requestBody)
      });

      if (!response.ok) {
        // Leer el cuerpo de respuesta para obtener detalles del error
        const errorData = await response.text();        // Determinar el nombre del proveedor para mensajes de error
        const providerName = isGroqKey ? 'Groq' : 'Desconocido';
        console.error(`Error respuesta ${providerName}:`, response.status, errorData);
        
        // Mostrar informaci√≥n detallada sobre errores de autorizaci√≥n
        if (response.status === 401) {
          console.error('Error de autenticaci√≥n: La API key no es v√°lida o est√° mal configurada:', 
            this.apiKey ? `API key configurada (primeros 5 caracteres): ${this.apiKey.substring(0, 5)}...` : 'API key no definida');
          throw new Error(`Error de autenticaci√≥n: La API key de ${providerName} no es v√°lida o ha expirado. Verifica que uses una API key de Groq (comienza con "gsk_").`);
        }
        
        // Si es un error de l√≠mite de tasa o tiempo de espera, intentar de nuevo
        if ((response.status === 429 || response.status === 500 || response.status === 503) && retryCount < 3) {
          let waitTime: number;

          if (response.status === 429) {
            // Para rate limits, extraer el tiempo recomendado del mensaje de error
            const errorObj = JSON.parse(errorData);
            const retryMatch = errorData.match(/try again in (\d+\.?\d*)s/i);
            if (retryMatch) {
              waitTime = Math.ceil(parseFloat(retryMatch[1]) * 1000) + 1000; // Agregar 1 segundo extra
              console.log(`Rate limit alcanzado. Esperando ${waitTime/1000} segundos seg√∫n recomendaci√≥n de la API...`);
            } else {
              // Fallback: usar backoff exponencial m√°s agresivo para rate limits
              waitTime = Math.pow(2, retryCount) * 3000; // 3s, 6s, 12s
              console.log(`Rate limit alcanzado. Reintentando en ${waitTime/1000} segundos...`);
            }
          } else {
            // Para otros errores, usar backoff exponencial normal
            waitTime = Math.pow(2, retryCount) * 1000; // 1s, 2s, 4s
            console.log(`Error temporal. Reintentando en ${waitTime/1000} segundos...`);
          }

          // Esperar antes de reintentar
          await new Promise(resolve => setTimeout(resolve, waitTime));
          return this.callAIAPI(prompt, retryCount + 1);
        }
        
        throw new Error(`Error en la llamada a la API de ${providerName}: ${response.status} ${response.statusText} - ${errorData}`);
      }

      const data = await response.json();

      // Verificar que la respuesta tenga el formato esperado
      if (!data.choices || !data.choices[0] || !data.choices[0].message) {
        console.error('‚ùå Respuesta inesperada de la API:', data);
        console.error('‚ùå Estructura de respuesta:', {
          hasChoices: !!data.choices,
          choicesLength: data.choices?.length,
          hasMessage: !!data.choices?.[0]?.message,
          messageContent: data.choices?.[0]?.message?.content
        });
        throw new Error('La respuesta de la API no tiene el formato esperado');
      }

      const aiResponse = data.choices[0].message.content || '';
      return aiResponse;
    } catch (error) {
      console.error('Error calling AI API:', error);
      
      // Reintentar en caso de errores de red o temporales
      if (error instanceof Error && 
          (error.message.includes('network') || error.message.includes('timeout')) && 
          retryCount < 3) {
        const waitTime = Math.pow(2, retryCount) * 1000;
        console.log(`Error de red/timeout. Reintentando en ${waitTime/1000} segundos...`);
        
        await new Promise(resolve => setTimeout(resolve, waitTime));
        return this.callAIAPI(prompt, retryCount + 1);
      }
      
      throw new Error(`Error al comunicarse con la API de IA: ${error instanceof Error ? error.message : String(error)}`);
    }
  }
  /**
   * Parsea la respuesta de la IA y la convierte en objetos TestCase
   */
  private parseAIResponse(
    aiResponse: string, 
    projectId: string, 
    userStoryId: string, 
    cycleNumber: number
  ): Partial<TestCase>[] {
    try {
      // Esta es una implementaci√≥n mejorada para el parser de respuestas IA
      const testCases: Partial<TestCase>[] = [];
      
      // Intentamos detectar si la respuesta tiene un formato de markdown con bloques de c√≥digo
      if (aiResponse.includes('```')) {
        // Si es as√≠, intentamos extraer los bloques de c√≥digo que contengan casos de prueba
        const codeBlocks = aiResponse.match(/```(?:markdown|md|json)?([\s\S]*?)```/g);
        if (codeBlocks && codeBlocks.length > 0) {
          const cleanResponse = codeBlocks.join('\n')
            .replace(/```(?:markdown|md|json)?/g, '')
            .replace(/```/g, '');
          
          // Reprocesamos con el contenido limpio de los bloques de c√≥digo
          return this.parseAIResponse(cleanResponse, projectId, userStoryId, cycleNumber);
        }
      }
      
      // Dividimos la respuesta en casos de prueba individuales usando m√∫ltiples patrones posibles
      const patrones = [
        /(?=TC-\d{3}|Caso de Prueba \d+:|Test Case \d+:|Caso \d+:)/g,
        /(?=## Caso de Prueba|## Test Case)/g,
        /(?=\n\d+\. Caso de Prueba)/g
      ];
      
      let testCaseBlocks: string[] = [];
      
      // Intentamos cada patr√≥n hasta encontrar uno que divida la respuesta en bloques
      for (const patron of patrones) {
        const bloques = aiResponse.split(patron).filter(block => block.trim().length > 0);
        if (bloques.length > 1) {
          testCaseBlocks = bloques;
          break;
        }
      }
      
      // Si no pudimos dividir con los patrones anteriores, intentamos con una divisi√≥n por l√≠neas vac√≠as
      if (testCaseBlocks.length <= 1) {
        const posiblesBloques = aiResponse.split(/\n\s*\n/).filter(block => 
          block.match(/(?:Caso|Test Case|TC-|Prueba)/i) &&
          block.match(/(?:Pasos|Steps)/i) &&
          block.match(/(?:Resultado|Result)/i)
        );
        
        if (posiblesBloques.length > 0) {
          testCaseBlocks = posiblesBloques;
        } else {
          // Si todo falla, tratamos toda la respuesta como un solo bloque
          testCaseBlocks = [aiResponse];
        }
      }
      
      let caseCounter = 1;
      for (const block of testCaseBlocks) {
        try {
          // Extraemos la informaci√≥n del bloque de texto con expresiones regulares m√°s robustas
          const nameMatch = block.match(/(?:Nombre|T√≠tulo|Title|Name)(?: del caso de prueba)?:?\s*(.+?)(?:\n|$)/i);
          const typeMatch = block.match(/Tipo(?: de prueba)?:?\s*(.+?)(?:\n|$)/i);
          const priorityMatch = block.match(/Prioridad:?\s*(.+?)(?:\n|$)/i);
          const codeRefMatch = block.match(/(TC-\d{3})/i);
          const preconditionsMatch = block.match(/Precondiciones?:?\s*([\s\S]*?)(?=\n\s*\d+\.|\n\s*ID|\n\s*Nombre|\n\s*TC-|\n\s*Tipo|\n\s*$)/i);
          
          // Extracci√≥n m√°s avanzada de pasos
          let steps: TestStep[] = [];
          
          // M√©todo 1: Buscar secci√≥n de pasos completa
          const stepsSection = block.match(/Pasos:?\s*([\s\S]*?)(?=Resultado esperado|Resultado|Precondiciones?|$)/i);
          if (stepsSection) {
            const stepsText = stepsSection[1].trim();
            // Dividir por n√∫meros de pasos (diferentes formatos: "1.", "1)", "Paso 1:", etc.)
            steps = stepsText.split(/\n\s*(?:\d+[\.\):]|Paso \d+:?)\s*/)
              .filter(step => step.trim().length > 0)
              .map(step => ({
                id: uuidv4(),
                description: step.trim().replace(/^\s*-\s*/, ''), // Eliminar vi√±etas iniciales si existen
                expected: ''
              }));
          }
          
          // Si no se encontraron pasos con el m√©todo anterior, intentar otro enfoque
          if (steps.length === 0) {
            const numberedSteps = block.match(/\d+[\.\)]\s*([^\n]+)/g);
            if (numberedSteps) {
              steps = numberedSteps.map(step => ({
                id: uuidv4(),
                description: step.replace(/^\d+[\.\)]\s*/, '').trim(),
                expected: ''
              }));
            }
          }
          
          // Si a√∫n no tenemos pasos, √∫ltimo intento con l√≠neas que empiezan con gui√≥n o asterisco
          if (steps.length === 0) {
            const bulletSteps = block.match(/(?:^|\n)\s*[-*]\s*([^\n]+)/g);
            if (bulletSteps) {
              steps = bulletSteps.map(step => ({
                id: uuidv4(),
                description: step.replace(/^\s*[-*]\s*/, '').trim(),
                expected: ''
              }));
            }
          }
          
          // Extracci√≥n mejorada de resultado esperado
          const resultMatch = block.match(/Resultado(?: esperado)?:?\s*([\s\S]*?)(?=Precondiciones?|TC-|Caso de Prueba|$)/i);
          let expectedResult = resultMatch ? resultMatch[1].trim() : '';
          
          // Si el resultado esperado est√° vac√≠o, intentar buscarlo con otro patr√≥n
          if (!expectedResult) {
            const alternativeResultMatch = block.match(/(?:Se espera|Esperado|Expected|Resultado|Result):?\s*([\s\S]*?)(?=Precondiciones?|TC-|Caso de Prueba|$)/i);
            expectedResult = alternativeResultMatch ? alternativeResultMatch[1].trim() : '';
          }
          
          // Buscar observaciones o notas
          const observationsMatch = block.match(/(?:Observaciones|Notas|Notes|Observations):?\s*([\s\S]*?)(?=TC-|Caso de Prueba|$)/i);
          const observations = observationsMatch ? observationsMatch[1].trim() : '';
          
          // Generar un c√≥digo de referencia si no se encontr√≥
          const codeRef = codeRefMatch ?
            codeRefMatch[1] :
            userStoryId ?
              `${userStoryId}-TC${String(caseCounter).padStart(2, '0')}` :
              `TC-${String(caseCounter).padStart(3, '0')}`;

          // Extraer posibles precondiciones
          const preconditions = preconditionsMatch ? preconditionsMatch[1].trim() : '';

          // Generar nombre espec√≠fico si la IA no lo hizo correctamente
          let testCaseName = nameMatch ? nameMatch[1].trim() : '';

          // Si el nombre es gen√©rico o vac√≠o, generar uno espec√≠fico basado en el requerimiento
          if (!testCaseName || testCaseName.length < 10 ||
              testCaseName.toLowerCase().includes('caso de prueba') ||
              testCaseName.toLowerCase().includes('test case') ||
              !testCaseName.match(/[a-zA-Z]{3,}/)) {

            // Generar nombre espec√≠fico basado en la HU y el contador
            const baseName = this.generateSpecificTestName(userStoryId, caseCounter);
            testCaseName = baseName;
          }

          // Crear el objeto de caso de prueba con toda la informaci√≥n extra√≠da
          const testCase: Partial<TestCase> = {
            id: uuidv4(),
            projectId,
            userStoryId,
            name: testCaseName,
            codeRef,
            testType: this.mapTestType(typeMatch ? typeMatch[1].trim() : 'Funcional'),
            steps,
            // A√±adimos precondiciones y observaciones al resultado esperado
            expectedResult: [
              expectedResult,
              preconditions ? `Precondiciones: ${preconditions}` : '',
              observations ? `Observaciones: ${observations}` : ''
            ].filter(Boolean).join('\n\n'),
            cycle: cycleNumber,
            status: 'No ejecutado',
            defects: [],
            evidences: [],
            priority: this.mapPriority(priorityMatch ? priorityMatch[1].trim() : 'Media'),
            createdAt: new Date().toISOString(),
            updatedAt: new Date().toISOString()
          };
          
          testCases.push(testCase);
          caseCounter++;
        } catch (blockError) {
          console.error('Error parsing individual test case block:', blockError);
          // Registrar el bloque problem√°tico para depuraci√≥n
          console.log('Problematic block:', block);
          // Continuamos con el siguiente bloque si hay un error en el actual
          continue;
        }
      }

      return testCases;
    } catch (error) {
      console.error('Error parsing AI response:', error);
      return [];
    }
  }
  
  /**
   * Mapea el tipo de prueba a un valor v√°lido
   */
  private mapTestType(type: string): TestCase['testType'] {
    const typeLower = type.toLowerCase();
    if (typeLower.includes('func')) return 'Funcional';
    if (typeLower.includes('no func')) return 'No Funcional';
    if (typeLower.includes('regre')) return 'Regresi√≥n';
    if (typeLower.includes('explor')) return 'Exploratoria';
    if (typeLower.includes('integ')) return 'Integraci√≥n';
    if (typeLower.includes('rend')) return 'Rendimiento';
    if (typeLower.includes('segur')) return 'Seguridad';
    return 'Funcional';
  }
  
  /**
   * Mapea la prioridad a un valor v√°lido
   */
  private mapPriority(priority: string): TestCase['priority'] {
    const priorityLower = priority.toLowerCase();
    // Considerar diferentes formas de expresar prioridades
    if (priorityLower.includes('alta') || 
        priorityLower.includes('high') || 
        priorityLower.includes('critical') || 
        priorityLower.includes('cr√≠tica')) {
      return 'Alta';
    }
    
    if (priorityLower.includes('baja') || 
        priorityLower.includes('low') || 
        priorityLower.includes('minor')) {
      return 'Baja';
    }
    
    // Por defecto, asignar prioridad media
    return 'Media';
  }
  
  /**
   * Valida la configuraci√≥n de la API antes de hacer llamadas
   */
  public async validateApiConfig(): Promise<{ valid: boolean; message?: string }> {
    try {
      if (!this.apiKey) {
        return {
          valid: false,
          message: 'No se ha configurado la clave de API de Groq'
        };
      }

      // Realizar una peque√±a llamada de prueba
      const testResponse = await fetch(this.apiEndpoint, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'Authorization': `Bearer ${this.apiKey}`
        },        body: JSON.stringify({
          model: this.apiModel,
          messages: [
            {
              role: "system",
              content: "Eres un asistente de pruebas."
            },
            {
              role: "user",
              content: "Responde con OK"
            }
          ],
          temperature: 0.7,
          max_tokens: 10
        })
      });

      if (!testResponse.ok) {
        const errorData = await testResponse.text();
        return {
          valid: false,
          message: `Error de configuraci√≥n: ${testResponse.status} ${testResponse.statusText} - ${errorData}`
        };
      }

      return { valid: true };
    } catch (error) {
      return {
        valid: false,
        message: `Error validando la configuraci√≥n: ${error instanceof Error ? error.message : String(error)}`
      };
    }
  }
  
  /**
   * M√©todo est√°tico para validar la configuraci√≥n de la API
   */
  static async validateApiConfiguration(): Promise<{ valid: boolean; message?: string }> {
    const service = new AITestCaseGeneratorService();
    return service.validateApiConfig();
  }

  // ============ NUEVOS M√âTODOS PARA LA INTERFAZ PROPUESTA ============

  /**
   * Generaci√≥n autom√°tica desde historias de usuario
   * M√©todo principal de la interfaz AITestCaseGenerator
   */
  async generateFromUserStory(userStory: string, options?: {
    projectId?: string;
    testPlanId?: string;
    cycleNumber?: number;
    contextualInfo?: string;
  }): Promise<TestCase[]> {
    try {
      console.log('üéØ Generando casos desde historia de usuario con instrucciones detalladas');
      console.log('üìù Historia de usuario:', userStory.substring(0, 100) + '...');
      
      // Convertir la historia de usuario en formato ExcelRequirementData
      const requirement: ExcelRequirementData = {
        userStoryId: '', // Dejar vac√≠o inicialmente para que enrichRequirement lo extraiga
        requirementName: userStory,
        description: userStory,
        acceptanceCriteria: this.extractAcceptanceCriteria(userStory),
        priority: 'Media',
        complexity: 'Media'
      };

      // Enriquecer el requisito para extraer el ID real de la historia de usuario
      this.enrichRequirement(requirement);

      console.log('üîß Requisito convertido:', {
        userStoryId: requirement.userStoryId,
        requirementName: requirement.requirementName?.substring(0, 50) + '...',
        acceptanceCriteriaCount: requirement.acceptanceCriteria?.length || 0
      });

      // Usar el m√©todo existente generateTestCases
      const testCases = await this.generateTestCases(
        options?.projectId || uuidv4(),
        [requirement],
        options?.cycleNumber || 1,
        options?.testPlanId,
        options?.contextualInfo
      );

      console.log('‚úÖ Casos generados desde historia de usuario:', testCases.length);
      return testCases as TestCase[];
    } catch (error) {
      console.error('Error generando casos desde historia de usuario:', error);
      throw new Error('No se pudieron generar los casos de prueba desde la historia de usuario');
    }
  }

  /**
   * Generaci√≥n desde requisitos funcionales
   * M√©todo principal de la interfaz AITestCaseGenerator
   */
  async generateFromRequirements(requirements: string[], options?: {
    projectId?: string;
    testPlanId?: string;
    cycleNumber?: number;
    contextualInfo?: string;
  }): Promise<TestCase[]> {
    try {
      console.log('üéØ Generando casos desde requisitos con instrucciones detalladas');
      console.log('üìù N√∫mero de requisitos:', requirements.length);
      console.log('üìã Primer requisito:', requirements[0]?.substring(0, 100) + '...' || 'Ninguno');
      
      // Convertir los requisitos en formato ExcelRequirementData
      const excelRequirements: ExcelRequirementData[] = requirements.map((req, index) => {
        const requirement: ExcelRequirementData = {
          userStoryId: '', // Dejar vac√≠o inicialmente para que enrichRequirement lo extraiga
          requirementName: req,
          description: req,
          acceptanceCriteria: this.extractAcceptanceCriteria(req),
          priority: 'Media',
          complexity: 'Media'
        };
        
        // Enriquecer el requisito para extraer el ID real
        this.enrichRequirement(requirement);
        
        return requirement;
      });

      console.log('üîß Requisitos convertidos:', excelRequirements.length);
      console.log('üîß Primer requisito convertido:', {
        userStoryId: excelRequirements[0]?.userStoryId,
        requirementName: excelRequirements[0]?.requirementName?.substring(0, 50) + '...',
        acceptanceCriteriaCount: excelRequirements[0]?.acceptanceCriteria?.length || 0
      });

      // Usar el m√©todo existente generateTestCases
      const testCases = await this.generateTestCases(
        options?.projectId || uuidv4(),
        excelRequirements,
        options?.cycleNumber || 1,
        options?.testPlanId,
        options?.contextualInfo
      );

      console.log('‚úÖ Casos generados desde requisitos:', testCases.length);
      return testCases as TestCase[];
    } catch (error) {
      console.error('Error generando casos desde requisitos:', error);
      throw new Error('No se pudieron generar los casos de prueba desde los requisitos');
    }
  }

  /**
   * Sugerencias de escenarios de prueba
   * M√©todo principal de la interfaz AITestCaseGenerator
   */
  async suggestTestScenarios(project: Project, options?: {
    contextualInfo?: string;
  }): Promise<string[]> {
    try {
      const prompt = `Analiza el siguiente proyecto y sugiere escenarios de prueba relevantes:

Proyecto: ${project.proyecto || project.nombre || 'Sin nombre'}
${project.descripcion ? `Descripci√≥n: ${project.descripcion}` : ''}
${options?.contextualInfo ? `Informaci√≥n adicional: ${options.contextualInfo}` : ''}

Por favor, sugiere escenarios de prueba espec√≠ficos y relevantes para este proyecto. Incluye:
- Escenarios funcionales principales
- Casos edge y de error
- Escenarios de integraci√≥n
- Pruebas de rendimiento si aplica
- Pruebas de seguridad si aplica

Responde en formato de lista numerada con descripciones claras.`;

      const response = await this.callAIAPI(prompt);
      return this.parseScenariosFromResponse(response);
    } catch (error) {
      console.error('Error generando sugerencias de escenarios:', error);
      throw new Error('No se pudieron generar las sugerencias de escenarios');
    }
  }

  /**
   * An√°lisis de cobertura de pruebas
   * M√©todo principal de la interfaz AITestCaseGenerator
   */
  async analyzeTestCoverage(projectId: string, existingTestCases?: TestCase[]): Promise<CoverageReport> {
    try {
      const testCasesText = existingTestCases ?
        existingTestCases.map(tc => `- ${tc.name}: ${tc.expectedResult}`).join('\n') :
        'No hay casos de prueba existentes';

      const prompt = `Analiza la cobertura de pruebas del proyecto con ID: ${projectId}

Casos de prueba existentes:
${testCasesText}

Por favor, proporciona un an√°lisis detallado que incluya:
1. Porcentaje estimado de cobertura actual
2. Escenarios faltantes o insuficientemente cubiertos
3. √Åreas de riesgo que necesitan m√°s pruebas
4. Recomendaciones espec√≠ficas para mejorar la cobertura

Responde en formato JSON con la siguiente estructura:
{
  "coveragePercentage": n√∫mero,
  "missingScenarios": ["escenario1", "escenario2"],
  "riskAreas": ["riesgo1", "riesgo2"],
  "recommendations": ["recomendaci√≥n1", "recomendaci√≥n2"]
}`;

      const response = await this.callAIAPI(prompt);
      return this.parseCoverageReport(response);
    } catch (error) {
      console.error('Error analizando cobertura de pruebas:', error);
      throw new Error('No se pudo analizar la cobertura de pruebas');
    }
  }

  // ============ M√âTODOS AUXILIARES ============

  /**
   * Extrae criterios de aceptaci√≥n de una historia de usuario o requisito
   */
  private extractAcceptanceCriteria(text: string): string[] {
    // Buscar patrones comunes de criterios de aceptaci√≥n
    const patterns = [
      /dado que|given|when|entonces|then|and|pero|but|y/i,
      /debe|should|shall|must|will/i,
      /poder|can|able to/i
    ];

    const criteria: string[] = [];
    const sentences = text.split(/[.!?]+/).filter(s => s.trim().length > 10);

    sentences.forEach(sentence => {
      const trimmed = sentence.trim();
      if (patterns.some(pattern => pattern.test(trimmed))) {
        criteria.push(trimmed);
      }
    });

    return criteria.length > 0 ? criteria : [text];
  }

  /**
   * Parsea escenarios desde la respuesta de la IA
   */
  private parseScenariosFromResponse(response: string): string[] {
    const scenarios: string[] = [];

    // Buscar listas numeradas o con vi√±etas
    const lines = response.split('\n').filter(line => line.trim());

    lines.forEach(line => {
      const trimmed = line.trim();
      // Detectar l√≠neas que parecen escenarios
      if (
        /^\d+[\.)]/.test(trimmed) || // 1. 1) etc
        /^[-*+]/.test(trimmed) || // - * + etc
        trimmed.length > 20 // L√≠neas largas que parecen descripciones
      ) {
        // Limpiar marcadores de lista
        const cleanScenario = trimmed
          .replace(/^\d+[\.)]\s*/, '')
          .replace(/^[-*+]\s*/, '')
          .trim();

        if (cleanScenario.length > 10) {
          scenarios.push(cleanScenario);
        }
      }
    });

    return scenarios.length > 0 ? scenarios : [response];
  }

  /**
   * Parsea el reporte de cobertura desde la respuesta JSON de la IA
   */
  private parseCoverageReport(response: string): CoverageReport {
    try {
      // Intentar parsear como JSON
      const parsed = JSON.parse(response);
      return {
        coveragePercentage: parsed.coveragePercentage || 0,
        missingScenarios: parsed.missingScenarios || [],
        riskAreas: parsed.riskAreas || [],
        recommendations: parsed.recommendations || []
      };
    } catch (error) {
      // Si no es JSON v√°lido, extraer informaci√≥n del texto
      const coverageMatch = response.match(/(\d+(?:\.\d+)?)%/);
      const coveragePercentage = coverageMatch ? parseFloat(coverageMatch[1]) : 0;

      const missingScenarios = this.extractListItems(response, 'faltante|missing|sin cubrir');
      const riskAreas = this.extractListItems(response, 'riesgo|risk|cr√≠tico|critical');
      const recommendations = this.extractListItems(response, 'recomend|recommend|suger|suggest');

      return {
        coveragePercentage,
        missingScenarios,
        riskAreas,
        recommendations
      };
    }
  }

  /**
   * Genera un nombre espec√≠fico para el caso de prueba basado en la HU
   */
  private generateSpecificTestName(userStoryId: string, caseCounter: number): string {
    // Mapa de nombres espec√≠ficos por HU
    const huSpecificNames: Record<string, string[]> = {
      'HU1': [
        'Validar creaci√≥n de campos Monto, Plazo y Producto en informe Jasper',
        'Verificar c√°lculo autom√°tico de intereses en formulario de pr√©stamo',
        'Comprobar validaci√≥n de datos obligatorios en solicitud de cr√©dito',
        'Validar integraci√≥n con sistema de reportes Jasper para generaci√≥n de informes',
        'Verificar persistencia de datos del pr√©stamo en base de datos',
        'Comprobar formato y presentaci√≥n del informe Jasper generado',
        'Validar reglas de negocio para aprobaci√≥n autom√°tica de pr√©stamos',
        'Verificar notificaciones por email al crear pr√©stamo aprobado'
      ],
      'HU2': [
        'Validar visualizaci√≥n de lista de pr√©stamos con filtros aplicados',
        'Verificar ordenamiento de pr√©stamos por fecha de creaci√≥n',
        'Comprobar paginaci√≥n en lista de pr√©stamos del sistema',
        'Validar b√∫squeda de pr√©stamos por n√∫mero de identificaci√≥n',
        'Verificar filtros por estado del pr√©stamo (aprobado, rechazado, pendiente)',
        'Comprobar exportaci√≥n de lista de pr√©stamos a Excel',
        'Validar permisos de visualizaci√≥n seg√∫n rol del usuario',
        'Verificar actualizaci√≥n autom√°tica de la lista al crear nuevo pr√©stamo'
      ]
    };

    // Obtener nombres espec√≠ficos para la HU
    const specificNames = huSpecificNames[userStoryId] || [];

    // Si tenemos nombres espec√≠ficos para esta HU, usar uno basado en el contador
    if (specificNames.length > 0) {
      const nameIndex = (caseCounter - 1) % specificNames.length;
      return specificNames[nameIndex];
    }

    // Fallback: generar nombre gen√©rico pero m√°s espec√≠fico que el anterior
    const genericNames = [
      'Validar funcionalidad principal del requerimiento',
      'Verificar comportamiento del sistema bajo condiciones normales',
      'Comprobar integraci√≥n con componentes externos',
      'Validar reglas de negocio implementadas',
      'Verificar manejo de errores y excepciones',
      'Comprobar rendimiento de la funcionalidad',
      'Validar seguridad y permisos de acceso',
      'Verificar logging y auditor√≠a de acciones'
    ];

    const genericIndex = (caseCounter - 1) % genericNames.length;
    // Remover la duplicaci√≥n del userStoryId en el nombre
    return genericNames[genericIndex];
  }

  /**
   * Extrae elementos de lista basados en palabras clave
   */
  private extractListItems(text: string, keywords: string): string[] {
    const keywordRegex = new RegExp(keywords, 'i');
    const items: string[] = [];

    const lines = text.split('\n').filter(line => line.trim());

    lines.forEach(line => {
      if (keywordRegex.test(line)) {
        const cleanLine = line
          .replace(/^\d+[\.)]\s*/, '')
          .replace(/^[-*+]\s*/, '')
          .replace(new RegExp(`.*${keywords}.*?[:\-]?\s*`, 'i'), '')
          .trim();

        if (cleanLine.length > 5) {
          items.push(cleanLine);
        }
      }
    });

    return items;
  }
}

export default AITestCaseGeneratorService;
